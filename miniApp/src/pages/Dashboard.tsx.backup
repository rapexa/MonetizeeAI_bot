import React from 'react';
import { useApp } from '../context/AppContext';
import { useNavigate, useLocation } from 'react-router-dom';
import Card from '../components/Card';
import RadialGauge from '../components/RadialGauge';
import { 
  TrendingUp, 
  Users, 
  MessageSquare, 
  Target, 
  Sparkles, 
  Brain, 
  ChevronLeft, 
  User, 
  Bell, 
  Settings, 
  UserPlus, 
  MessageCircle, 
  Zap, 
  Edit3, 
  Edit, 
  DollarSign,
  X,
  CheckCircle,
  Clock,
  Gift,
  Star,
  Trophy,
  Camera,
  Upload,
  Award,
  Coins,
  Calendar,
  TrendingDown,
  AlertCircle,
  Heart,
  Bookmark,
  Share2,
  Plus,
  BarChart3,
  PieChart,
  Activity,
  ArrowUp,
  ArrowDown,
  Play,
  Wrench,
  Rocket,
  Package,
  Search,
  Map,
  Copy,
  Download,
  RefreshCw,
  ChevronRight
} from 'lucide-react';

const Dashboard: React.FC = () => {
  const { userData, setUserData } = useApp();
  const navigate = useNavigate();
  const location = useLocation();
  const [editingField, setEditingField] = React.useState<string | null>(null);

  const [tempValue, setTempValue] = React.useState<string>('');
  const [showNotifications, setShowNotifications] = React.useState(false);
  const [showProfileUpload, setShowProfileUpload] = React.useState(false);
  const [profileImage, setProfileImage] = React.useState<string | null>(null);
  const [chatMessage, setChatMessage] = React.useState<string>('');
  const [isEditingPrompt, setIsEditingPrompt] = React.useState<boolean>(false);

  // Check for prompt from ReadyPrompts page
  React.useEffect(() => {
    if (location.state?.promptText) {
      setChatMessage(location.state.promptText);
      setIsEditingPrompt(true);
      // Clear the state to prevent re-triggering
      navigate(location.pathname, { replace: true });
    }
  }, [location.state, navigate]);

  const [chatMessages, setChatMessages] = React.useState<Array<{id: number, text: string, sender: 'user' | 'ai', timestamp: string}>>([
    {
      id: 1,
      text: 'سلام! من AI کوچ شخصی شما هستم. آماده‌ام تا در مسیر کسب‌وکار و درآمدزایی کمکتون کنم. چطور می‌تونم کمکتون کنم؟',
      sender: 'ai',
      timestamp: new Date().toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' })
    }
  ]);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('fa-IR').format(amount) + ' تومان';
  };

  const hasIncome = userData.incomeMonth > 0;
  const monthGrowth = 12;

  // Enhanced Notifications with different types and interactions
  const notifications = [
    {
      id: 1,
      title: 'هدف ماهانه محقق شد! 🎉',
      message: 'شما ۱۲۰٪ از هدف درآمد ماهانه خود را محقق کرده‌اید. تبریک!',
      time: '۲ ساعت پیش',
      icon: Trophy,
      color: 'bg-yellow-100 text-yellow-600 dark:bg-yellow-900/30 dark:text-yellow-400',
      unread: true,
      priority: 'high',
      action: 'مشاهده جزئیات',
      actionColor: 'bg-yellow-500 hover:bg-yellow-600'
    },
    {
      id: 2,
      title: 'پیشنهاد جدید دریافت شد',
      message: 'یک مشتری جدید برای پروژه بازاریابی دیجیتال درخواست همکاری داده است.',
      time: '۴ ساعت پیش',
      icon: UserPlus,
      color: 'bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400',
      unread: true,
      priority: 'medium',
      action: 'پاسخ دادن',
      actionColor: 'bg-green-500 hover:bg-green-600'
    },
    {
      id: 3,
      title: 'یادآوری: جلسه فردا',
      message: 'جلسه بررسی استراتژی فروش فردا ساعت ۱۰ صبح برگزار می‌شود.',
      time: '۶ ساعت پیش',
      icon: Calendar,
      color: 'bg-blue-100 text-blue-600 dark:bg-blue-900/30 dark:text-blue-400',
      unread: false,
      priority: 'medium',
      action: 'اضافه به تقویم',
      actionColor: 'bg-blue-500 hover:bg-blue-600'
    },
    {
      id: 4,
      title: 'به‌روزرسانی سیستم',
      message: 'نسخه جدید نرم‌افزار مدیریت مشتریان آماده نصب است.',
      time: '۱ روز پیش',
      icon: RefreshCw,
      color: 'bg-purple-100 text-purple-600 dark:bg-purple-900/30 dark:text-purple-400',
      unread: false,
      priority: 'low',
      action: 'نصب',
      actionColor: 'bg-purple-500 hover:bg-purple-600'
    }
  ];

  const unreadCount = notifications.filter(n => n.unread).length;

  const handleEditField = (field: string, currentValue: number) => {
    setEditingField(field);
    setTempValue(currentValue.toString());
  };

  const handleSaveField = (field: string) => {
    const newValue = parseInt(tempValue) || 0;
    setUserData(prev => ({
      ...prev,
      [field]: newValue
    }));
    setEditingField(null);
    setTempValue('');
  };

  const handleCancelEdit = () => {
    setEditingField(null);
    setTempValue('');
  };

  const handleProfileImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setProfileImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleNotificationAction = (notificationId: number, action: string) => {
    // Handle notification actions
    console.log(`Action ${action} for notification ${notificationId}`);
  };

  const markAllAsRead = () => {
    // Mark all notifications as read
    console.log('Mark all as read');
  };

  const handleCurrentStageClick = () => {
    navigate('/levels');
  };

  const handleCancelPromptEdit = () => {
    setIsEditingPrompt(false);
    setChatMessage('');
  };

  const handleSendMessage = () => {
    if (!chatMessage.trim()) return;

    const newMessage = {
      id: chatMessages.length + 1,
      text: chatMessage,
      sender: 'user' as const,
      timestamp: new Date().toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' })
    };

    setChatMessages(prev => [...prev, newMessage]);
    setChatMessage('');
    setIsEditingPrompt(false);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = generateAIResponse(chatMessage);
      const aiMessage = {
        id: chatMessages.length + 2,
        text: aiResponse,
        sender: 'ai' as const,
        timestamp: new Date().toLocaleTimeString('fa-IR', { hour: '2-digit', minute: '2-digit' })
      };
      setChatMessages(prev => [...prev, aiMessage]);
    }, 1000);
  };

  const generateAIResponse = (userMessage: string) => {
    const responses = [
      'عالی! این یک سوال بسیار خوب است. بیایید این موضوع را بررسی کنیم...',
      'من می‌تونم در این زمینه کمکتون کنم. چند راهکار موثر وجود داره...',
      'این یک چالش رایج در کسب‌وکار است. پیشنهاد می‌کنم...',
      'بسیار خوب! برای حل این مشکل، می‌تونیم از این استراتژی‌ها استفاده کنیم...',
      'من در این زمینه تجربه دارم. بیایید با هم بررسی کنیم...'
    ];
    return responses[Math.floor(Math.random() * responses.length)];
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 transition-colors duration-300">
      <div className="container mx-auto px-4 py-6">
        
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <div className="relative">
              <div className="w-16 h-16 bg-gradient-to-br from-orange-500 via-red-600 to-pink-600 dark:from-orange-400 dark:via-red-500 dark:to-pink-500 rounded-2xl flex items-center justify-center shadow-2xl ring-2 ring-white/30 dark:ring-gray-700/30 overflow-hidden">
                {profileImage ? (
                  <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                ) : (
                  <User size={32} className="text-white" />
                )}
              </div>
              <button
                onClick={() => setShowProfileUpload(true)}
                className="absolute -bottom-1 -right-1 w-6 h-6 bg-white dark:bg-gray-800 rounded-full flex items-center justify-center shadow-lg border-2 border-orange-500 hover:scale-110 transition-all duration-300"
              >
                <Camera size={12} className="text-orange-600 dark:text-orange-400" />
              </button>
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900 dark:text-white transition-colors duration-300">
                سلام، {userData.name}! 👋
              </h1>
              <p className="text-gray-600 dark:text-gray-300 transition-colors duration-300">
                امروز چطور می‌خوای پیشرفت کنی؟
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-3">
            <button
              onClick={() => setShowNotifications(true)}
              className="relative p-3 bg-white/70 dark:bg-gray-800/70 backdrop-blur-xl rounded-xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300"
            >
              <Bell size={20} className="text-gray-700 dark:text-gray-300" />
              {unreadCount > 0 && (
                <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center animate-pulse">
                  {unreadCount}
                </div>
              )}
            </button>
            <button
              onClick={() => navigate('/settings')}
              className="p-3 bg-white/70 dark:bg-gray-800/70 backdrop-blur-xl rounded-xl border border-gray-200/50 dark:border-gray-700/50 hover:shadow-lg transition-all duration-300"
            >
              <Settings size={20} className="text-gray-700 dark:text-gray-300" />
            </button>
          </div>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          
          {/* Income Stats */}
          <Card className="lg:col-span-2">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white transition-colors duration-300">
                  آمار درآمد
                </h2>
                <p className="text-gray-600 dark:text-gray-300 transition-colors duration-300">
                  عملکرد مالی این ماه
                </p>
              </div>
              <div className="flex items-center gap-2">
                <TrendingUp size={20} className="text-green-600 dark:text-green-400" />
                <span className="text-sm font-medium text-green-600 dark:text-green-400">
                  +{monthGrowth}%
                </span>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200/50 dark:border-green-800/50 backdrop-blur-xl rounded-2xl p-4">
                <div className="flex items-center gap-3 mb-2">
                  <div className="p-2 bg-green-100 dark:bg-green-900/30 rounded-full">
                    <DollarSign size={16} className="text-green-600 dark:text-green-400" />
                  </div>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-300 transition-colors duration-300">
                    درآمد ماهانه
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-2xl font-bold text-gray-900 dark:text-white transition-colors duration-300">
                    {formatCurrency(userData.incomeMonth)}
                  </span>
                  <button
                    onClick={() => handleEditField('incomeMonth', userData.incomeMonth)}
                    className="p-1 hover:bg-green-100 dark:hover:bg-green-900/30 rounded-lg transition-colors"
                  >
                    <Edit3 size={14} className="text-green-600 dark:text-green-400" />
                  </button>
                </div>
                {editingField === 'incomeMonth' && (
                  <div className="flex gap-2 mt-2">
                    <input
                      type="number"
                      value={tempValue}
                      onChange={(e) => setTempValue(e.target.value)}
                      className="flex-1 px-2 py-1 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                    <button
                      onClick={() => handleSaveField('incomeMonth')}
                      className="px-2 py-1 bg-green-500 text-white text-xs rounded-lg hover:bg-green-600"
                    >
                      ذخیره
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="px-2 py-1 bg-gray-500 text-white text-xs rounded-lg hover:bg-gray-600"
                    >
                      انصراف
                    </button>
                  </div>
                )}
              </div>

              <div className="bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border border-blue-200/50 dark:border-blue-800/50 backdrop-blur-xl rounded-2xl p-4">
                <div className="flex items-center gap-3 mb-2">
                  <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-full">
                    <Users size={16} className="text-blue-600 dark:text-blue-400" />
                  </div>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-300 transition-colors duration-300">
                    مشتریان فعال
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-2xl font-bold text-gray-900 dark:text-white transition-colors duration-300">
                    {userData.activeClients}
                  </span>
                  <button
                    onClick={() => handleEditField('activeClients', userData.activeClients)}
                    className="p-1 hover:bg-blue-100 dark:hover:bg-blue-900/30 rounded-lg transition-colors"
                  >
                    <Edit3 size={14} className="text-blue-600 dark:text-blue-400" />
                  </button>
                </div>
                {editingField === 'activeClients' && (
                  <div className="flex gap-2 mt-2">
                    <input
                      type="number"
                      value={tempValue}
                      onChange={(e) => setTempValue(e.target.value)}
                      className="flex-1 px-2 py-1 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <button
                      onClick={() => handleSaveField('activeClients')}
                      className="px-2 py-1 bg-blue-500 text-white text-xs rounded-lg hover:bg-blue-600"
                    >
                      ذخیره
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="px-2 py-1 bg-gray-500 text-white text-xs rounded-lg hover:bg-gray-600"
                    >
                      انصراف
                    </button>
                  </div>
                )}
              </div>

              <div className="bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border border-purple-200/50 dark:border-purple-800/50 backdrop-blur-xl rounded-2xl p-4">
                <div className="flex items-center gap-3 mb-2">
                  <div className="p-2 bg-purple-100 dark:bg-purple-900/30 rounded-full">
                    <Target size={16} className="text-purple-600 dark:text-purple-400" />
                  </div>
                  <span className="text-sm font-medium text-gray-600 dark:text-gray-300 transition-colors duration-300">
                    هدف ماهانه
                  </span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-2xl font-bold text-gray-900 dark:text-white transition-colors duration-300">
                    {formatCurrency(userData.monthlyGoal)}
                  </span>
                  <button
                    onClick={() => handleEditField('monthlyGoal', userData.monthlyGoal)}
                    className="p-1 hover:bg-purple-100 dark:hover:bg-purple-900/30 rounded-lg transition-colors"
                  >
                    <Edit3 size={14} className="text-purple-600 dark:text-purple-400" />
                  </button>
                </div>
                {editingField === 'monthlyGoal' && (
                  <div className="flex gap-2 mt-2">
                    <input
                      type="number"
                      value={tempValue}
                      onChange={(e) => setTempValue(e.target.value)}
                      className="flex-1 px-2 py-1 text-sm border border-purple-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                    />
                    <button
                      onClick={() => handleSaveField('monthlyGoal')}
                      className="px-2 py-1 bg-purple-500 text-white text-xs rounded-lg hover:bg-purple-600"
                    >
                      ذخیره
                    </button>
                    <button
                      onClick={handleCancelEdit}
                      className="px-2 py-1 bg-gray-500 text-white text-xs rounded-lg hover:bg-gray-600"
                    >
                      انصراف
                    </button>
                  </div>
                )}
              </div>
            </div>
          </Card>

          {/* AI Chat Assistant */}
          <Card>
            <div className="flex items-center gap-3 mb-4">
              <div className="w-10 h-10 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg">
                <Brain size={20} className="text-white" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-900 dark:text-white transition-colors duration-300">
                  AI کوچ
                </h3>
                <p className="text-xs text-gray-600 dark:text-gray-300 transition-colors duration-300">
                  دستیار هوشمند شما
                </p>
              </div>
            </div>

            {/* Chat Messages */}
            <div className="space-y-3 mb-4 max-h-48 overflow-y-auto">
              {chatMessages.map((message) => (
                <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                    <div className={`${
                      message.sender === 'ai' 
                        ? 'bg-orange-100/70 dark:bg-orange-900/30 text-gray-800 dark:text-gray-200' 
                        : 'bg-gray-100/70 dark:bg-gray-700/50 text-gray-800 dark:text-gray-200'
                    } backdrop-blur-sm rounded-lg px-3 py-2 text-xs`}>
                      <p>{message.text}</p>
                      <div className="text-xs mt-1 opacity-60">
                        {message.timestamp}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {/* Chat Input */}
            {isEditingPrompt ? (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h6 className="text-sm font-medium text-orange-600 dark:text-orange-400">
                    ویرایش پرامپت - جاهای خالی رو پر کنید:
                  </h6>
                  <button
                    onClick={handleCancelPromptEdit}
                    className="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                  >
                    انصراف ✕
                  </button>
                </div>
                
                <textarea
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  placeholder="پرامپت خود را ویرایش کنید..."
                  className="w-full h-32 px-4 py-3 bg-white/80 dark:bg-gray-700/70 backdrop-blur-md rounded-xl border border-orange-300/50 dark:border-orange-600/50 text-sm text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/50 focus:border-orange-500/50 transition-all duration-300 resize-none leading-relaxed"
                />
                
                <div className="flex gap-2">
                  <button 
                    onClick={handleSendMessage}
                    disabled={!chatMessage.trim()}
                    className="flex-1 px-4 py-3 bg-gradient-to-r from-orange-600 to-red-600 dark:from-orange-500 dark:to-red-500 disabled:from-gray-400 disabled:to-gray-500 text-white rounded-xl text-sm font-medium hover:shadow-lg transition-all duration-300 flex items-center justify-center gap-2"
                  >
                    ارسال پرامپت 🚀
                  </button>
                  <button 
                    onClick={handleCancelPromptEdit}
                    className="px-4 py-3 bg-gray-200/70 dark:bg-gray-600/70 text-gray-700 dark:text-gray-300 rounded-xl text-sm font-medium hover:bg-gray-300/70 dark:hover:bg-gray-500/70 transition-all duration-300"
                  >
                    انصراف
                  </button>
                </div>
              </div>
            ) : (
              <div className="space-y-2">
                <div className="flex gap-2">
                  <input
                    type="text"
                    placeholder="سوال خود را بپرسید..."
                    value={chatMessage}
                    onChange={(e) => setChatMessage(e.target.value)}
                    className="flex-1 px-3 py-2 bg-white/70 dark:bg-gray-700/60 backdrop-blur-md rounded-xl border border-orange-200/30 dark:border-orange-700/30 text-sm text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-orange-500/50"
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  />
                  <button 
                    onClick={handleSendMessage}
                    disabled={!chatMessage.trim()}
                    className="px-4 py-2 bg-gradient-to-r from-orange-600 to-red-600 dark:from-orange-500 dark:to-red-500 disabled:from-gray-400 disabled:to-gray-500 text-white rounded-xl text-sm font-medium hover:shadow-lg transition-all duration-300"
                  >
                    ارسال
                  </button>
                </div>
                
                {/* Minimal Prompts Button */}
                <button
                  onClick={() => navigate('/ready-prompts')}
                  className="w-full py-2 text-xs text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-300 border border-orange-200/50 dark:border-orange-700/50 hover:border-orange-300/70 dark:hover:border-orange-600/70 rounded-lg hover:bg-orange-50/30 dark:hover:bg-orange-900/20 transition-all duration-300 flex items-center justify-center gap-1"
                >
                  <Sparkles size={12} />
                  پرامپت‌های آماده
                </button>
              </div>
            )}

            {/* Quick Action */}
            <button 
              onClick={() => navigate('/chatbot')}
              className="w-full bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 dark:from-orange-500 dark:via-red-500 dark:to-pink-500 text-white py-3 rounded-xl text-sm font-medium hover:shadow-xl transition-all duration-300 flex items-center justify-center gap-2 backdrop-blur-sm border border-orange-500/30 hover:scale-[1.02] mt-4"
            >
              <MessageCircle size={16} />
              باز کردن چت کامل
            </button>
          </Card>
        </div>

        {/* Enhanced Notifications Modal */}
        {showNotifications && (
          <div className="fixed inset-0 bg-black/50 dark:bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-colors duration-300">
            <div className="bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl rounded-2xl w-full max-w-sm max-h-[85vh] overflow-hidden transition-colors duration-300 shadow-2xl border border-white/20 dark:border-gray-700/20">
              <div className="flex items-center justify-between p-4 border-b border-gray-200/50 dark:border-gray-700/50 bg-gradient-to-r from-purple-50/80 to-blue-50/80 dark:from-purple-900/20 dark:to-blue-900/20 backdrop-blur-sm">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white transition-colors duration-300">اعلان‌ها</h3>
                  <p className="text-sm text-gray-500 dark:text-gray-400">{unreadCount} اعلان خوانده نشده</p>
                </div>
                <div className="flex items-center gap-2">
                  {unreadCount > 0 && (
                    <button 
                      onClick={markAllAsRead}
                      className="text-xs bg-purple-100/70 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 px-2 py-1 rounded-full hover:bg-purple-200/70 dark:hover:bg-purple-900/50 transition-colors duration-300 backdrop-blur-sm"
                    >
                      همه را خوانده علامت بزن
                    </button>
                  )}
                  <button 
                    onClick={() => setShowNotifications(false)}
                    className="p-2 hover:bg-white/50 dark:hover:bg-gray-700/50 rounded-lg transition-colors duration-300 backdrop-blur-sm"
                  >
                    <X size={20} className="text-gray-500 dark:text-gray-400" />
                  </button>
                </div>
              </div>
              <div className="overflow-y-auto max-h-96">
                {notifications.map((notification) => (
                  <div key={notification.id} className={`p-4 border-b border-gray-100/50 dark:border-gray-700/50 hover:bg-white/50 dark:hover:bg-gray-700/50 transition-colors duration-300 backdrop-blur-sm ${notification.unread ? 'bg-blue-50/80 dark:bg-blue-900/20 border-r-4 border-r-blue-500' : ''}`}>
                    <div className="flex items-start gap-3">
                      <div className={`p-2 rounded-full ${notification.color} transition-colors duration-300 backdrop-blur-sm shadow-lg ${notification.priority === 'high' ? 'ring-2 ring-yellow-300 dark:ring-yellow-600' : ''}`}>
                        <notification.icon size={16} className="text-current" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-medium text-gray-900 dark:text-white text-sm transition-colors duration-300 truncate">
                            {notification.title}
                          </h4>
                          {notification.unread && (
                            <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0 animate-pulse"></div>
                          )}
                          {notification.priority === 'high' && (
                            <AlertCircle size={12} className="text-red-500 flex-shrink-0" />
                          )}
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-2 transition-colors duration-300 line-clamp-2">
                          {notification.message}
                        </p>
                        <div className="flex items-center justify-between">
                          <p className="text-xs text-gray-500 dark:text-gray-400 transition-colors duration-300 flex items-center gap-1">
                            <Clock size={10} />
                            {notification.time}
                          </p>
                          {notification.action && (
                            <button 
                              onClick={() => handleNotificationAction(notification.id, notification.action)}
                              className={`text-xs ${notification.actionColor} text-white px-3 py-1 rounded-full hover:shadow-lg hover:scale-105 transition-all duration-300`}
                            >
                              {notification.action}
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="p-4 border-t border-gray-200/50 dark:border-gray-700/50 bg-gray-50/80 dark:bg-gray-750/80 backdrop-blur-sm">
                <button className="w-full text-center text-sm bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent hover:from-purple-700 hover:to-pink-700 transition-all duration-300 font-medium">
                  مشاهده همه اعلان‌ها
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Profile Upload Modal */}
        {showProfileUpload && (
          <div className="fixed inset-0 bg-black/50 dark:bg-black/70 backdrop-blur-sm flex items-center justify-center p-4 z-50 transition-colors duration-300">
            <div className="bg-white/95 dark:bg-gray-800/95 backdrop-blur-xl rounded-2xl p-6 w-full max-w-sm transition-colors duration-300 shadow-2xl border border-white/20 dark:border-gray-700/20">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white transition-colors duration-300">تغییر عکس پروفایل</h3>
                <button 
                  onClick={() => setShowProfileUpload(false)}
                  className="p-2 hover:bg-white/50 dark:hover:bg-gray-700/50 rounded-lg transition-colors duration-300 backdrop-blur-sm"
                >
                  <X size={20} className="text-gray-500 dark:text-gray-400" />
                </button>
              </div>
              <div className="text-center">
                <div className="w-24 h-24 bg-gradient-to-br from-purple-500 via-pink-500 to-blue-600 dark:from-purple-400 dark:via-pink-400 dark:to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4 overflow-hidden shadow-2xl ring-2 ring-white/30 dark:ring-gray-700/30">
                  {profileImage ? (
                    <img src={profileImage} alt="Profile" className="w-full h-full object-cover" />
                  ) : (
                    <User size={32} className="text-white" />
                  )}
                </div>
                <label className="inline-flex items-center gap-2 bg-gradient-to-r from-purple-600 via-pink-500 to-blue-600 dark:from-purple-500 dark:via-pink-400 dark:to-blue-500 text-white px-6 py-3 rounded-xl cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-300 font-medium">
                  <Upload size={16} />
                  انتخاب عکس جدید
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleProfileImageUpload}
                    className="hidden"
                  />
                </label>
                <p className="text-xs text-gray-500 dark:text-gray-400 mt-3 transition-colors duration-300">
                  فرمت‌های مجاز: JPG, PNG, GIF (حداکثر ۵ مگابایت)
                </p>
              </div>
            </div>
          </div>
        )}

      </div>
    </div>
  );
};

export default Dashboard;